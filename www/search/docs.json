[{"path":"app/context","body":"The Context Object\n\nThe context object is an object that is passed as the second argument to the handler function which contains additional information related to the current request Params Object\n\nif the handler is registered as a path restricted handler or as a route handler the params object contains all the dynamic path params that are matched by the current route Example\n\n/// ... app.use(\"/test/:a/hi/:b\", (request, context) => { const { a, b } = context.params; return response(`a = ${a} and b = ${b}`) }) /// ... \n\n Pattern\n\npattern is related to the path restricted handlers, pattern is a URLPattern object that successfully matched for the current path  \n\nYou most likely won't need to use this option  Headers Object\n\nThese are the response headers for the current response you can set and get response headers from here. Headers is a standard web API  \n\nNote: You can directly set the headers of the response as a part of the response constructor but this is useful when the current handler wants to set response headers but doesn't necessarily return a response, like the cors handler uses this feature to set cors headers  Example\n\n/// ... app.use((request, context) => { context.headers.set(\"X-header\", \"Header Value\") return response(\"Sent a response with headers\") }) /// ... \n\n Connection Object\n\nInformation about the connection a request arrived on. \n\nIt has 2 properties \n\n1. localAddr Stores the local address of the connection. \n2. Stores the local address of the connection.\n3. remoteAddr Stores remote address of the connection. \n4. Stores remote address of the connection. \n\nBoth of them are of type Deno.Addr Example\n\n/// ... app.use((request, context) => { const { localAddr, remoteAddr } = context.conn; console.log(localAddr, remoteAddr); return response(\"Hello\") }) /// ...","attributes":{"title":"The Context Object","prev":["/docs/app/handler","The Handler"],"next":["/docs/router/create-router","Creating a Router"]}},{"path":"app/create-app","body":"Creating an app\n\nThis is the core function of this library. createApp function as the name suggests creates a DeserveApp instance \n\nimport { createApp } from \"https://deno.land/x/deserve/mod.ts\" const app = createApp() \n\n Listen\n\nThe listen method allows you to start the app server with the given hostname and port \n\n/// ... app.listen({ port: 8080 }) \n\n Context\n\nThe createApp method optionally takes in function that takes the current request and returns an object called the context that can be accessed by all other Handlers registered. Click here to learn more about context Handlers\n\nHandlers are the building blocks of your server, these are similar to (but NOT the same) as middleware, if you are familiar with middleware based frameworks \n\nHandler is basically a function that takes in Request as an argument and can return a Response to fulfill the request or return nothing to continue to the next registered handler \n\nHandlers also take an optional argument called the context which you can learn more about here \n\nuse the use method on the app object to register handlers \n\napp.use(...handlers) \n\n Example\n\napp.use((request) => { return new Response(\"Hello, World!\") })  \n\n Example with Multiple Handlers\n\napp.use((request) => { console.log(`new request at ${request.url}`); }, () => { return new Response(\"Hello, World!\") }) \n\n \n\nHere the first handler logs the url of every incoming request and because it doesn't return a response the next handler will be called and in the above example the second handler returns a response so the execution ends and Hello World is returned  \n\nNOTE: The use method can be called multiple times to achieve the same effect   Complete Example\n\nimport { createApp } from \"https://deno.land/x/deserve/mod.ts\" const app = createApp() app.use((request) => { console.log(`new request at ${request.url}`); }, () => { return new Response(\"Hello, World!\") }) app.listen({ port: 8080 }) \n\n Path restricted handlers\n\nThese are the same as normal handlers but only run when the current path matches the given path pattern \n\nThe path patterns follow the web standard URLPattern API Example\n\n/// ... app.use(\"/\", () => response(\"Home Page\")) app.use(\"/contact\", () => response(\"Contact Page\")) app.use(\"/blog/:slug\", (request, context) => { const { slug } = context.params; return response(`Blog with slug ${slug}`) }) /// ...","attributes":{"title":"Creating an app","prev":["/docs/quick-start","Quick Start"],"next":["/docs/app/handler","The Handler"]}},{"path":"app/handler","body":"The Handler\n\nHandler is a function that takes in a request that can return a response to fulfill the request or return nothing to continue to next handler if available or send a default 404 response like \"cannot get /\" Example\n\n/// App init logic app.use((request) => { const { pathname } = new URL(request.url) if (request.method === \"GET\" && pathname === \"/\") { return new Response(\"Home Page\") } }) app.use((request) => { const { pathname } = new URL(request.url) if (request.method === \"POST\" && pathname === \"/contact\") { return new Response(\"Contact form submitted\") } }) /// ...rest \n\n \n\nIn the above example the first handler checks if the request is a get method to the index (\"/\") route and responds if it is and returns nothing otherwise \n\nNow the control goes to the next handler that checks for a post request to the contact route and responds to that request \n\nIf the above handlers return nothing there is no other handler left so the default 404 response is sent Context\n\nThe createApp method optionally takes in function that takes the current request and returns an object called the context that can be accessed by all other Handlers registered. Click here to learn more about context","attributes":{"title":"The Handler","prev":["/docs/app/create-app","Creating an App"],"next":["/docs/app/context","The Context Object"]}},{"path":"quick-start","body":"Deserve Quick StartImport\n\n// main.ts import { createApp, createRouter, response } from \"https://deno.land/x/deserve/mod.ts\"; \n\n Create App\n\n/// .... const app = createApp() \n\n Create Router\n\n/// .... const router = createRouter<typeof app>() \n\n  \n\ntypeof app gives the router better type safety  Add Routes\n\nRoutes take in a path that follows the URLPattern API which is a Web standard and a series of handlers that can return a response to complete the request or return nothing to go to the next handler \n\n/// .... router.get(\"/\", (req, ctx) => { return response(\"Hello World\") }) \n\n  \n\nresponse(...) is just an alias for new Response(...) which is a web standard  Append the router to the app and start the server\n\n/// .... app .use(router.routes()) .listen({ port: 8080 }) \n\n Now run the app\n\ndeno run --allow-net main.ts \n\n Complete Example\n\nimport { createApp, createRouter, response } from \"https://deno.land/x/deserve/mod.ts\"; // Create App const app = createApp() // Create Router const router = createRouter<typeof app>() // Define Routes router.get(\"/\", (req, ctx) => { return response(\"Hello World\") }) app // Append Router to App .use(router.routes()) // Start the Server .listen({ port: 8080 }) \n\n Now to visit http://localhost:8080 and you should see Hello World in the browser","attributes":{"title":"Quick Start","prev":["/docs","Documentation"],"next":["/docs/app/create-app","Creating an app"]}},{"path":"router/create-router","body":"Creating a Router\n\ncoming soon :(","attributes":{"title":"Creating a Router","prev":["/docs/app/context","The Context Object"]}},{"path":"utils/jsx","body":"Using JSX\n\nThis module can be used to render an html page using JSX Basic Usage\n\nThe jsx function can be used to generate an HTML response object that can be returned from a handler \n\n/** @jsx h */ import { h, jsx, Head, Res, Html, Body } from \"https://deno.land/x/deserve/utils/jsx/mod.ts\" /// ... router.get(\"/\", () => { return jsx( <main> <Html lang=\"en\" /> {/** This is default behavior */} <Res status={404} /> <Head> <title>Not Found</title> </Head> <Body class=\"dark\" /> <h1>Oops! Page you are looking for is not found</h1> </main> ) }) /// ... \n\n Advanced Usage\n\nThe createJSX function can be used to create a custom jsx function It takes an object with three functions \n\n- transformBody: Takes in a body node and must return jsx that is inserted into the body tag\n- transform: Takes in a render context and it properties can be mutated asynchronously  \n\nDeserve Docs use this to dynamically inject compiled UNOCSS into the head tag  \n\n/** @jsx h */ import { h, createJsx, Head } from \"https://deno.land/x/deserve/utils/jsx/mod.ts\" /// ... const jsx = createJsx({ // Transform the Body Node transformBody(body) { return <Container> {body} </Container> } // Transform the Render Context async transform(ctx) { ctx.body = ctx.body + \"<script>console.log('Hello from Transform')</script>\" ctx.head.children.push(<link rel=\"stylesheet\" href=\"/style.css\" />) ctx.response.headers.append(\"X-custom-header\", \"Added\") } }) router.get(\"/\", () => { return jsx( <main> <Head> <title>Home Page</title> </Head> <h1>Hello, World!</h1> </main>, ) }) /// ...","attributes":{"title":"Using JSX","prev":["/docs/router/create-router","Creating a Router"],"next":["/docs/utils/markdown","Rendering Markdown"]}},{"path":"utils/markdown","body":"Rendering Markdown\n\nThis a supporting utility for rendering markdown in deserve can be used without deserve too Usage\n\nimport { renderMd } from \"https://deno.land/x/deserve/utils/md/mod.ts\" const { html } = renderMd(\"# Hello, World!\") console.log(html); /// <h1 id=\"hello-world\">Hello, World!</h1>  \n\n Front Matter\n\nThis module has built in support for front matter and enabled by default \n\nimport { renderMd } from \"https://deno.land/x/deserve/utils/md/mod.ts\" const { html, attributes } = renderMd(`--- title: Hello --- # Hello, World!`, { frontMatter: true }) console.log(html); /// <h1 id=\"hello-world\">Hello, World!</h1> console.log(attributes); /// { title: \"Hello\" } \n\n Highlight\n\nSyntax highlighting of code is supported and enabled by default \n\nimport { renderMd } from \"https://deno.land/x/deserve/utils/md/mod.ts\" const { html, attributes } = renderMd(/** --- Markdown goes here --- */, { highlight: true, showCopyButton: true, }) console.log(html); /// ... <h1 id=\"hello-world\">Hello, World!</h1> ... console.log(attributes); /// { title: \"Hello\" } \n\n  \n\nNOTE: This module adds some additional html for highlighting and there are exported css and script exports in the module that must be included in your html for better styling and the copy button functionality if enabled  Complete Example \n\nNOTE: You can combine this with the jsx module for better DX  \n\nimport { createApp, createRouter, response } from \"https://deno.land/x/deserve/mod.ts\" import { renderMd, css, script } from \"https://deno.land/x/deserve/utils/md/mod.ts\" const app = createApp() const router = createRouter<typeof app>() router.get(\"/\", () => { const { html, attributes } = renderMd(` --- title: Hello --- # Hello, World!` ) return response(` <html> <head> <title>${attributes.title}</title> <style>${css}</style> </head> <body> ${html} <script>${script}</script> </body> </html>`, { headers: [ [\"Content-Type\", \"text/html\"] ] }) }) app.use(router.routes()) app.listen() \n\n Themes\n\nThe syntax highlighter supports multiple themes listed below \n\n- coy\n- dark\n- funky\n- okaida\n- prism\n- solarized-light\n- tomorrow\n- twilight \n\nA theme can be applied just by importing the corresponding theme file like below  \n\nThe okaida theme is applied by default  \n\nimport \"https://deno.land/x/deserve/utils/md/themes/{{theme}}.ts\" \n\n \n\nReplace {{theme}} with one of the themes mentioned above Example\n\nimport \"https://deno.land/x/deserve/utils/md/themes/coy.ts\"","attributes":{"title":"Rendering Markdown","prev":["/docs/utils/jsx","Using JSX"]}}]